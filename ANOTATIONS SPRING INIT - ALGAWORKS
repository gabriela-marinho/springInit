DEPENDÊNCIA : <jackson-dataformat-xml> é um serialiador e um desserializador de formato de envio de dados para o
servidor, ex: json,xml...

DEPENDENCIA DEVTOOLS : recarrega a aplicacao enquanto estiver rodando, separando oq foi alterado do q nao
foi. <sprin-boot-devtools>

configurando BANCO DE DADOS, persistir os dados em algum mecanismo como por exemplo mysql, postgrees

*//login myspq:
root
senha:
suasenha *//

necessaria em tempo de execução apenas:
<scope>runtime</scope> não é necessaria qnd o codigo esta compilado.
Ao colocar a validação :  createDatabaseIfNotExist=true na url do banco afirmo q ao iniciar a aplicacao se nao tiver
 um banco com o nome indicado cria um novo

&

serverTimezone=UTC salva hora no formato utc

flyway core: funcionalidades princiais
flayay mysql: suporte ao mysql

				  JAKARTA EE = JAVA EE

				JAKARTA PERSISTENCE = JPA
Nós ajuda a mapear um banco de dados relacional como tabelas, em classe Java -> Mapeamento Objeto Relacional
Dessa forma podemos fazer operações no banco de dados usando a API do jakarta persistence, facilitando a consultas,
exclusões etc.


				*******ATENÇÃO******
O SPRING DATA JPA NÃO É UMA IMPLEMENTAÇÃO DO JAVA EE

DENTRO DO SPRING DATA JPA EXISTE UMA DEPENDENCIA TRANSITIVA(DEPENDENCIA DA DEPENDENCIA) CHAMADA HIBERNATE
(PRODUTO FINAL)ONDE ESTE SIM É UMA IMPLEMENTAÇÃO DO JAKARTA PERSISTENCE


*PERSISTINDO DADOS*
        -Spring Data JPA = ajuda a criar repositorios dentro jo jakarta persistence.
        -Em projetos grandes NÃO usamos codigos jpql no controlador. Criamos repositorios q usam o jakarta persistence.
        -Crio um novo pacote onde crio os repositorios.
1. crio uma interface
2. extendo o JpaRepository e coloco < classeModel , tipo do identificador>

        -O Spring Data JPA vai fornecer uma implementação dessa interface pra gente automaticamente.
1. no controller eu injeto a interface
2. insiro a anotation @Autowired ,indicando q queremos injetar uma instancia q esta sendo gerenciada pelo spring.
3. crio um construror ,pois caso seja somente uma variavel de instancia provada, eu nao vou ter acesso de fora.
Para facilitar no lombok uso o @AllArgsContructor, e com isso todas as variaveis de instancia ele cria um construtor.
        -Com a anotation @RequestMapping("/nomeDaMinhaURI") posso passa o nome do meu end point nao precisando repetir
        o nome em cada metodo.

*JAKARTA BEAN VALIDATION*

Validação de objetos java.
Hibernete validation é uma implementação de referencia do jakarta bean validation

  @Transactional = do spring, esse metodo deve ser executado dentro de uma transação, se algo der errado
  ao executar esse metodo, todas as execuções q envolvem banco de dados serão descartadas, será dado o rollback.




